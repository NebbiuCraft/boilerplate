{
  "openapi": "3.0.4",
  "info": {
    "title": "Boilerplate Order Management API",
    "description": "A Clean Architecture implementation with DDD principles for order management",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get comprehensive health status of the application",
        "description": "Returns comprehensive health information including database connectivity, external service status, and overall system health",
        "operationId": "GetHealth",
        "responses": {
          "200": {
            "description": "Health status retrieved successfully",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "503": {
            "description": "One or more health checks failed",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/Health/live": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Simple liveness probe for container orchestration",
        "description": "Simple endpoint to verify the application is running. Used by container orchestrators like Kubernetes for liveness probes",
        "operationId": "GetLiveness",
        "responses": {
          "200": {
            "description": "Application is alive and responding",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/Health/ready": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Readiness probe for container orchestration",
        "description": "Endpoint that checks if the application is ready to serve requests by verifying all dependencies are healthy. Used by container orchestrators for readiness probes",
        "operationId": "GetReadiness",
        "responses": {
          "200": {
            "description": "Application is ready to serve requests",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "503": {
            "description": "Application is not ready (dependencies unavailable)",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/Order": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "description": "Creates a new order for the specified customer email address",
        "operationId": "CreateOrder",
        "requestBody": {
          "description": "Order creation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a paginated list of orders",
        "description": "Retrieves a paginated list of orders with optional filtering by customer email and amount range, plus sorting capabilities",
        "operationId": "GetOrders",
        "parameters": [
          {
            "name": "CustomerEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinTotal",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MaxTotal",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDtoPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Order/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get an order by ID",
        "description": "Retrieves a specific order by its unique identifier",
        "operationId": "GetOrderById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The order ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an existing order",
        "description": "Updates an existing order with new details",
        "operationId": "UpdateOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The order ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Updated order details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Order updated successfully"
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an order (soft delete)",
        "description": "Soft deletes an order (sets Active = false). The order is not physically removed from the database",
        "operationId": "DeleteOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The order ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order deleted successfully"
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Order/{id}/payment": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Process payment for an order",
        "description": "Processes payment for a specific order. Amounts over $10,000 will fail for demonstration purposes",
        "operationId": "ProcessOrderPayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The order ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Payment processing details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResult"
                }
              }
            }
          },
          "400": {
            "description": "Payment failed or invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResult"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "customerEmail": {
            "type": "string",
            "nullable": true
          },
          "isPaid": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDtoPaginatedResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDto"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hasPrevious": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNext": {
            "type": "boolean",
            "readOnly": true
          },
          "sortBy": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PaymentResult": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "processedAmount": {
            "type": "number",
            "format": "double"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PaymentStatus": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProcessPaymentDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "nullable": true
          },
          "isPaid": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Application health monitoring and diagnostics"
    },
    {
      "name": "Order",
      "description": "Order management including CRUD operations and payment processing"
    }
  ]
}